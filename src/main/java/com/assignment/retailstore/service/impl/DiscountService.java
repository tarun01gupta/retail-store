package com.assignment.retailstore.service.impl;

import com.assignment.retailstore.constant.RetailStoreConstant;
import com.assignment.retailstore.entity.User;
import com.assignment.retailstore.repository.IUserRepository;
import com.assignment.retailstore.service.IDiscountService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.Optional;

@Service
public class DiscountService implements IDiscountService {
    @Autowired
    IUserRepository iUserRepository;

    /**
     * @param userId     user id of a customer
     * @param billAmount amount of the bill generated by system without discount
     * @return discount net payable amount after applying discount
     */
    @Override
    public double calculateDiscount(Long userId, double billAmount) {
        Optional<User> user = iUserRepository.findById(userId);
        if (user.isPresent()) {
            return performCalculation(user.get(), billAmount);
        } else {
            throw new IllegalArgumentException();
        }
    }

    /**
     * @param existingUser user exists in the Database
     * @param billAmount   amount of the bill generated by system without discount
     * @return discount net payable amount after applying discount
     */
    private double performCalculation(User existingUser, double billAmount) {
        double discount = 0;
        if (existingUser.getUserType().equalsIgnoreCase(RetailStoreConstant.EMPLOYEE)) {
            discount = 0.30 * billAmount;
        } else if (existingUser.getUserType().equalsIgnoreCase(RetailStoreConstant.AFFILIATE)) {
            discount = 0.10 * billAmount;
        } else if (existingUser.getUserType().equalsIgnoreCase(RetailStoreConstant.EXISTING) && isCustomerOver2Years(existingUser)) {
            discount = 0.05 * billAmount;
        }

        double additionalDiscount = (int) (billAmount / 100) * 5;
        discount += additionalDiscount;
        return discount;
    }

    /**
     * Calculates the user creation date time
     *
     * @param user in the Database table
     * @return true or false is the condition mets
     */
    private boolean isCustomerOver2Years(User user) {
        return user.getCreatedDate() != null && user.getCreatedDate().isBefore(LocalDateTime.now().minusYears(2));
    }
}
